)
# Convert date fields.
df_dog$datetime <- as.POSIXct(strptime(df_dog$datetime,"%m/%d/%Y %H:%M:%S"))
# Normalize char fields.
df_dog$name <- trimws(tolower(df_dog$name))
# Examine the updated data frame.
str(df_dog)
df_dog %>%
group_by(owner_id, name) %>%
count() %>%
filter(n>1) %>%
arrange(desc(n))
df_dog <- df_dog %>%
group_by(owner_id, name) %>%
slice_max(datetime) %>%
ungroup()
dim(df_dog)
stopifnot(identical(dim(df_dog)+0, c(1595, 24))) # Verify expected dim.
summary(df_dog)
df_owner <- read.csv('../data/raw/owners.csv', header=TRUE, skipNul=TRUE)
str(df_owner)
stopifnot(identical(dim(df_owner)+0, c(1225, 6))) # Verify expected dim.
colnames(df_owner) <- readr::read_lines(
'../references/owner-readable-column-names.txt')
str(df_owner)
df_owner <- subset(df_owner, select=-c(
internal_logic_1,
zip_code
))
stopifnot(identical(dim(df_owner)+0, c(1225, 4))) # Verify 2 columns dropped.
# Convert numeric and logical fields.
df_owner <- df_owner %>%
mutate_at("age", as.numeric) %>%
mutate_at("sex", as.factor)
# Convert date fields.
df_owner$datetime <- as.POSIXct(strptime(df_owner$datetime,"%m/%d/%Y %H:%M:%S"))
# Examine the updated data frame.
str(df_owner)
df_owner %>%
group_by(owner_id) %>%
count() %>%
filter(n>1) %>%
arrange(desc(n))
df_owner <- df_owner %>%
group_by(owner_id) %>%
slice_max(datetime) %>%
ungroup()
dim(df_owner)
stopifnot(identical(dim(df_owner)+0, c(1063, 4))) # Verify expected dim.
summary(df_owner)
set_a <- df_dog %>%
select(owner_id) %>%
unique()
set_b <- df_owner %>%
select(owner_id) %>%
unique()
result <- setequal(intersect(set_a, set_b), set_a)
print(paste("A ∩ B = A:", result))
stopifnot(result)
rm(set_a, set_b, result)
df <- merge(df_dog, df_owner, by="owner_id")
str(df)
stopifnot(identical(dim(df)+0, c(1595, 27))) # Verify expected dim.
rm(df_dog, df_owner)
stopifnot(FALSE) # PREVENT OLD CODE EXECUTION.
library(tidyverse)
knitr::opts_chunk$set(echo=TRUE)
df_dog <- read.csv('../data/raw/dogs.csv', header=TRUE, skipNul=TRUE)
str(df_dog, list.len=5)
stopifnot(identical(dim(df_dog)+0, c(1704, 29))) # Verify expected dim.
colnames(df_dog) <- readr::read_lines(
'../references/dog-readable-column-names.txt')
str(df_dog)
df_dog <- df_dog %>%
select(-starts_with("internal_logic_"))
stopifnot(identical(dim(df_dog)+0, c(1704, 24))) # Verify 5 columns dropped.
# Convert logical fields.
df_dog <- df_dog %>%
mutate_at(c("is_living_with_dog", "is_open_to_another_dog"), as.logical)
# Convert factor fields.
factors <- c(
'time_thinking',
'primary_motivation',
'acquisition_source',
'important_char_1',
'important_char_2',
'important_char_3',
'important_char_4',
'important_char_5',
'important_char_6',
'met_expectations',
'time_together_len',
'curr_dog_location',
'new_important_char_1',
'new_important_char_2',
'new_important_char_3',
'new_important_char_4',
'new_important_char_5',
'new_important_char_6',
'new_acquisition_source'
)
df_dog <- df_dog %>%
mutate_at(factors, as.factor)
rm(factors)
# Adjust factor levels.
primary_motivations <- c(
"Companionship and affection",
"Social interaction",
"Exercise, adventure partner",
"Protection",
"Working or sporting",
"Someone else in the home wanted a dog (e.g. kids, spouse)",
"Companion for another dog or pet"
)
df_dog$primary_motivation <- as.factor(ifelse(
df_dog$primary_motivation %in% primary_motivations,
as.character(df_dog$primary_motivation),
"other"
))
rm(primary_motivations)
levels(df_dog$primary_motivation) <- c(
"companionship",
"social interaction",
"exercise",
"protection",
"working",
"someone else",
"trainability",
"friend for pet"
)
simple_levels <- c(
"age",
"appearance",
"breed",
"compatability",
"personality",
"size",
"trainability"
)
levels(df_dog$important_char_1) <- simple_levels
levels(df_dog$important_char_2) <- simple_levels
levels(df_dog$important_char_3) <- simple_levels
levels(df_dog$important_char_4) <- simple_levels
levels(df_dog$important_char_5) <- simple_levels
levels(df_dog$important_char_6) <- simple_levels
simple_levels <- c("", simple_levels)
levels(df_dog$new_important_char_1) <- simple_levels
levels(df_dog$new_important_char_2) <- simple_levels
levels(df_dog$new_important_char_3) <- simple_levels
levels(df_dog$new_important_char_4) <- simple_levels
levels(df_dog$new_important_char_5) <- simple_levels
levels(df_dog$new_important_char_6) <- simple_levels
rm(simple_levels)
# data.frame(levels = unique(df_dog$time_thinking), value = as.numeric(unique(df_dog$time_thinking)))
# df_dog$time_thinking <- factor(
#   df_dog$time_thinking,
#   levels=c(2,3,4,1),
#   labels= c("1wk-6mos", "6mos-6yrs", ">6yrs", "<1wk")
# )
# data.frame(levels = unique(df_dog$time_thinking), value = as.numeric(unique(df_dog$time_thinking)))
#simple_levels <- c(
#  "<1wk",
#  "1wk-6mos",
#  "6mos-6yrs",
#  ">6yrs"
#)
#df_dog$time_thinking <- factor(df_dog$time_thinking, levels=simple_levels,
#                               ordered=TRUE)
# levels(df_dog$time_together_len) <- c(
#   "",
#   "1wk-6mos",
#   "6mos-6yrs",
#   ">6yrs",
#   "<1wk"
# )
levels(df_dog$acquisition_source) <- c(
"import",
"breeder",
"family-friend",
"found",
"pet shop",
"online",
"shelter"
)
levels(df_dog$new_acquisition_source) <- c(
"",
"import",
"breeder",
"family-friend",
"found",
"pet shop",
"online",
"shelter"
)
levels(df_dog$met_expectations) <- c(
"no",
"partially-time",
"partially-acceptance",
"yes"
)
dog_locations <- c(
"Rehomed",
"Surrendered to shelter/rescue",
"Euthanized",
"Ran away/got lost",
"Passed",
""
)
df_dog$curr_dog_location <- as.factor(ifelse(
df_dog$curr_dog_location %in% dog_locations,
as.character(df_dog$curr_dog_location),
"other"
))
rm(dog_locations)
levels(df_dog$curr_dog_location) <- c(
"",
"euthanized",
"other",
"passed",
"lost",
"rehomed"
)
# Convert date fields.
df_dog$datetime <- as.POSIXct(strptime(df_dog$datetime,"%m/%d/%Y %H:%M:%S"))
# Normalize char fields.
df_dog$name <- trimws(tolower(df_dog$name))
# Examine the updated data frame.
str(df_dog)
df_dog %>%
group_by(owner_id, name) %>%
count() %>%
filter(n>1) %>%
arrange(desc(n))
df_dog <- df_dog %>%
group_by(owner_id, name) %>%
slice_max(datetime) %>%
ungroup()
dim(df_dog)
stopifnot(identical(dim(df_dog)+0, c(1595, 24))) # Verify expected dim.
summary(df_dog)
df_owner <- read.csv('../data/raw/owners.csv', header=TRUE, skipNul=TRUE)
str(df_owner)
stopifnot(identical(dim(df_owner)+0, c(1225, 6))) # Verify expected dim.
colnames(df_owner) <- readr::read_lines(
'../references/owner-readable-column-names.txt')
str(df_owner)
df_owner <- subset(df_owner, select=-c(
internal_logic_1,
zip_code
))
stopifnot(identical(dim(df_owner)+0, c(1225, 4))) # Verify 2 columns dropped.
# Convert numeric and logical fields.
df_owner <- df_owner %>%
mutate_at("age", as.numeric) %>%
mutate_at("sex", as.factor)
# Convert date fields.
df_owner$datetime <- as.POSIXct(strptime(df_owner$datetime,"%m/%d/%Y %H:%M:%S"))
# Examine the updated data frame.
str(df_owner)
df_owner %>%
group_by(owner_id) %>%
count() %>%
filter(n>1) %>%
arrange(desc(n))
df_owner <- df_owner %>%
group_by(owner_id) %>%
slice_max(datetime) %>%
ungroup()
dim(df_owner)
stopifnot(identical(dim(df_owner)+0, c(1063, 4))) # Verify expected dim.
summary(df_owner)
set_a <- df_dog %>%
select(owner_id) %>%
unique()
set_b <- df_owner %>%
select(owner_id) %>%
unique()
result <- setequal(intersect(set_a, set_b), set_a)
print(paste("A ∩ B = A:", result))
stopifnot(result)
rm(set_a, set_b, result)
df <- merge(df_dog, df_owner, by="owner_id")
str(df)
stopifnot(identical(dim(df)+0, c(1595, 27))) # Verify expected dim.
rm(df_dog, df_owner)
df <- df %>%
select(-starts_with("datetime"))
stopifnot(identical(dim(df_owner)+0, c(1595, 25))) # Verify 2 columns dropped.
library(tidyverse)
knitr::opts_chunk$set(echo=TRUE)
df_dog <- read.csv('../data/raw/dogs.csv', header=TRUE, skipNul=TRUE)
str(df_dog, list.len=5)
stopifnot(identical(dim(df_dog)+0, c(1704, 29))) # Verify expected dim.
colnames(df_dog) <- readr::read_lines(
'../references/dog-readable-column-names.txt')
str(df_dog)
df_dog <- df_dog %>%
select(-starts_with("internal_logic_"))
stopifnot(identical(dim(df_dog)+0, c(1704, 24))) # Verify 5 columns dropped.
# Convert logical fields.
df_dog <- df_dog %>%
mutate_at(c("is_living_with_dog", "is_open_to_another_dog"), as.logical)
# Convert factor fields.
factors <- c(
'time_thinking',
'primary_motivation',
'acquisition_source',
'important_char_1',
'important_char_2',
'important_char_3',
'important_char_4',
'important_char_5',
'important_char_6',
'met_expectations',
'time_together_len',
'curr_dog_location',
'new_important_char_1',
'new_important_char_2',
'new_important_char_3',
'new_important_char_4',
'new_important_char_5',
'new_important_char_6',
'new_acquisition_source'
)
df_dog <- df_dog %>%
mutate_at(factors, as.factor)
rm(factors)
# Adjust factor levels.
primary_motivations <- c(
"Companionship and affection",
"Social interaction",
"Exercise, adventure partner",
"Protection",
"Working or sporting",
"Someone else in the home wanted a dog (e.g. kids, spouse)",
"Companion for another dog or pet"
)
df_dog$primary_motivation <- as.factor(ifelse(
df_dog$primary_motivation %in% primary_motivations,
as.character(df_dog$primary_motivation),
"other"
))
rm(primary_motivations)
levels(df_dog$primary_motivation) <- c(
"companionship",
"social interaction",
"exercise",
"protection",
"working",
"someone else",
"trainability",
"friend for pet"
)
simple_levels <- c(
"age",
"appearance",
"breed",
"compatability",
"personality",
"size",
"trainability"
)
levels(df_dog$important_char_1) <- simple_levels
levels(df_dog$important_char_2) <- simple_levels
levels(df_dog$important_char_3) <- simple_levels
levels(df_dog$important_char_4) <- simple_levels
levels(df_dog$important_char_5) <- simple_levels
levels(df_dog$important_char_6) <- simple_levels
simple_levels <- c("", simple_levels)
levels(df_dog$new_important_char_1) <- simple_levels
levels(df_dog$new_important_char_2) <- simple_levels
levels(df_dog$new_important_char_3) <- simple_levels
levels(df_dog$new_important_char_4) <- simple_levels
levels(df_dog$new_important_char_5) <- simple_levels
levels(df_dog$new_important_char_6) <- simple_levels
rm(simple_levels)
# data.frame(levels = unique(df_dog$time_thinking), value = as.numeric(unique(df_dog$time_thinking)))
# df_dog$time_thinking <- factor(
#   df_dog$time_thinking,
#   levels=c(2,3,4,1),
#   labels= c("1wk-6mos", "6mos-6yrs", ">6yrs", "<1wk")
# )
# data.frame(levels = unique(df_dog$time_thinking), value = as.numeric(unique(df_dog$time_thinking)))
#simple_levels <- c(
#  "<1wk",
#  "1wk-6mos",
#  "6mos-6yrs",
#  ">6yrs"
#)
#df_dog$time_thinking <- factor(df_dog$time_thinking, levels=simple_levels,
#                               ordered=TRUE)
# levels(df_dog$time_together_len) <- c(
#   "",
#   "1wk-6mos",
#   "6mos-6yrs",
#   ">6yrs",
#   "<1wk"
# )
levels(df_dog$acquisition_source) <- c(
"import",
"breeder",
"family-friend",
"found",
"pet shop",
"online",
"shelter"
)
levels(df_dog$new_acquisition_source) <- c(
"",
"import",
"breeder",
"family-friend",
"found",
"pet shop",
"online",
"shelter"
)
levels(df_dog$met_expectations) <- c(
"no",
"partially-time",
"partially-acceptance",
"yes"
)
dog_locations <- c(
"Rehomed",
"Surrendered to shelter/rescue",
"Euthanized",
"Ran away/got lost",
"Passed",
""
)
df_dog$curr_dog_location <- as.factor(ifelse(
df_dog$curr_dog_location %in% dog_locations,
as.character(df_dog$curr_dog_location),
"other"
))
rm(dog_locations)
levels(df_dog$curr_dog_location) <- c(
"",
"euthanized",
"other",
"passed",
"lost",
"rehomed"
)
# Convert date fields.
df_dog$datetime <- as.POSIXct(strptime(df_dog$datetime,"%m/%d/%Y %H:%M:%S"))
# Normalize char fields.
df_dog$name <- trimws(tolower(df_dog$name))
# Examine the updated data frame.
str(df_dog)
df_dog %>%
group_by(owner_id, name) %>%
count() %>%
filter(n>1) %>%
arrange(desc(n))
df_dog <- df_dog %>%
group_by(owner_id, name) %>%
slice_max(datetime) %>%
ungroup()
dim(df_dog)
stopifnot(identical(dim(df_dog)+0, c(1595, 24))) # Verify expected dim.
summary(df_dog)
df_owner <- read.csv('../data/raw/owners.csv', header=TRUE, skipNul=TRUE)
str(df_owner)
stopifnot(identical(dim(df_owner)+0, c(1225, 6))) # Verify expected dim.
colnames(df_owner) <- readr::read_lines(
'../references/owner-readable-column-names.txt')
str(df_owner)
df_owner <- subset(df_owner, select=-c(
internal_logic_1,
zip_code
))
stopifnot(identical(dim(df_owner)+0, c(1225, 4))) # Verify 2 columns dropped.
# Convert numeric and logical fields.
df_owner <- df_owner %>%
mutate_at("age", as.numeric) %>%
mutate_at("sex", as.factor)
# Convert date fields.
df_owner$datetime <- as.POSIXct(strptime(df_owner$datetime,"%m/%d/%Y %H:%M:%S"))
# Examine the updated data frame.
str(df_owner)
df_owner %>%
group_by(owner_id) %>%
count() %>%
filter(n>1) %>%
arrange(desc(n))
df_owner <- df_owner %>%
group_by(owner_id) %>%
slice_max(datetime) %>%
ungroup()
dim(df_owner)
stopifnot(identical(dim(df_owner)+0, c(1063, 4))) # Verify expected dim.
summary(df_owner)
set_a <- df_dog %>%
select(owner_id) %>%
unique()
set_b <- df_owner %>%
select(owner_id) %>%
unique()
result <- setequal(intersect(set_a, set_b), set_a)
print(paste("A ∩ B = A:", result))
stopifnot(result)
rm(set_a, set_b, result)
df <- merge(df_dog, df_owner, by="owner_id")
str(df)
stopifnot(identical(dim(df)+0, c(1595, 27))) # Verify expected dim.
rm(df_dog, df_owner)
df <- df %>%
select(-starts_with("datetime"))
stopifnot(identical(dim(df)+0, c(1595, 25))) # Verify 2 columns dropped.
stopifnot(FALSE) # PREVENT OLD CODE EXECUTION.
